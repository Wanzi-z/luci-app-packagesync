#!/bin/sh /etc/rc.common
# Copyright (C) 2023 muink

. /lib/functions.sh

START=99
USE_PROCD=1

EXTRA_COMMANDS="getver checkln symln setcron cleanup"
EXTRA_HELP=\
"	getver		Get releases list
	checkln		Check home path
	symln		Make symlink to mount porint
	setcron		Add cron expression to crontabs
	cleanup		Clean up invalid versions"

CONFIG_NAME='packagesync'
TYPEDSECTION='packagesync'
RELEASE='release'

MNTPKGS='/mnt/packagesync'
CRONTABS='/etc/crontabs/root'
DEF_HOMEURL="packagesync"
DEF_HOMEPATH="/www/$DEF_HOMEURL"
RELEASES_LIST="/var/packagesync/releaseslist"
# url path
URLPATH_RELEASES='releases'
URLPATH_SNAPSHOTS='snapshots'
URLPATH_PACKAGES_VERS='packages-' # packages-22.03
URLPATH_VERS_PACKAGES='packages'
URLPATH_VERS_TARGETS='targets'

if [ "$(uci -q get $CONFIG_NAME.@$TYPEDSECTION[0].proxy_enabled)" == "1" ]; then
    export ALL_PROXY=$(uci -q get $CONFIG_NAME.@$TYPEDSECTION[0].proxy_protocol)://$(uci -q get $CONFIG_NAME.@$TYPEDSECTION[0].proxy_server)
fi



getver() {
local rawhtml stables releases
rawhtml="$(curl --connect-timeout 10 --retry 3 -sSL https://downloads.openwrt.org)"
stables="$( \
echo "$rawhtml" | sed -n '/Stable Release/,/Development Snapshots/p' \
| sed -n '/<ul>/,/<\/ul>/p' | grep 'OpenWrt' \
| sed -E "s|.+\breleases/([\.0-9]+)/.+|\1|g" \
)"
releases="$( \
echo "$rawhtml" | sed -n '/Release Archive/,/\$/p' \
| sed -n '/<ul>/,/<\/ul>/p' | grep 'OpenWrt' \
| sed -E "s|.+\breleases/([\.0-9]+)/.+|\1|g" \
)"
mkdir -p "${RELEASES_LIST%/*}" 2>/dev/null
echo -e "$stables\n$releases"
echo -e "$stables\n$releases" > "$RELEASES_LIST"
}

gethomeurl() {
home_url="$1" home_path=
[ -z "$home_url" ] && home_url="$(uci -q get $CONFIG_NAME.@$TYPEDSECTION[0].home_url)"
home_url="${home_url:-$DEF_HOMEURL}"
home_path="/www/$home_url"
}

checkln() {
gethomeurl

# clean up old symlink
ls -l /www|grep "\-> $MNTPKGS"|grep -v " $home_url -> $MNTPKGS"|sed -En "s,.+ ('.+'|\S+) -> ${MNTPKGS}$,'/www/\1',p" | xargs rm -f 
# show occupied
find /www/* ! -type l -maxdepth 0|sed "s|.*/||g"
}

symln() {
gethomeurl "$1"

# make mount dir
[ -e "$home_path" ] || { ln -s "$MNTPKGS" "$home_path" 2>/dev/null; return 0; }
[ -L "$home_path" ] || { >&2 echo "The Name $home_url is already used, please use another name"; return 1; }
[ -n "$(ls -l "$home_path"|grep " $home_path -> $MNTPKGS")" ] || { >&2 echo "The Name $home_url is already used, please use another name"; return 1; }
return 0
}

setcron() {
local cron="$1" exist=$(cat "$CRONTABS" | sed -n "/\/etc\/init.d\/packagesync start/=")

if [ -n "$cron" ]; then
	[ -n "$exist" ] && sed -i "/\/etc\/init.d\/packagesync start/d" "$CRONTABS"
	sed -i "\$a$cron /etc/init.d/packagesync start" "$CRONTABS"
else
	[ -n "$exist" ] && sed -i "/\/etc\/init.d\/packagesync start/d" "$CRONTABS"
fi
}

cleanup() {
local autorm="$1"
gethomeurl

local count targets packages pkgarchs
[ -d "$home_path/$URLPATH_RELEASES" ] || return 1

count=$(uci -q show $CONFIG_NAME|grep "=$RELEASE"|sed -E "s|.+@$RELEASE\[(\d+)\].+|\1|"|tail -n1)

local ucivv="version target subtarget pkgarch"
for i in $(seq 0 $count); do
	for _var in $ucivv; do
		eval "local $_var=\$(uci -q get $CONFIG_NAME.@$RELEASE[$i].$_var)"
	done
	targets="${targets:+$targets|}/$version/$URLPATH_VERS_TARGETS/$target/$subtarget\b"
	packages="${packages:+$packages|}/$version/$URLPATH_VERS_PACKAGES\b"
	pkgarchs="${pkgarchs:+$pkgarchs|}/$URLPATH_PACKAGES_VERS${version%\.*}/$pkgarch\b"
done
#echo "$targets"
#echo "$packages"
#echo "$pkgarchs"

local rm_path="$(\
find $home_path/$URLPATH_RELEASES/* -type d -o -type l -maxdepth 3|grep -Ev "$targets"|grep -Ev "$packages"|grep -Ev "$pkgarchs"\
|grep -E "(/\d+\.\d+[^/]*/($URLPATH_VERS_PACKAGES|$URLPATH_VERS_TARGETS/[^/]+/[^/]+)\$|/${URLPATH_PACKAGES_VERS}\d+\.\d+/[^/]+\$)"\
)"
echo "$rm_path"|sed 's|^/|rm /|g'
[ -z "$autorm" ] && return 0 || echo "$rm_path" | xargs rm -rf 

}

restart() {
	start
}
